Prior to linux 2.6, the system measured time with jiffies, usually 1 jiffy = 0.01 second but not always. Now it measure it whith clock ticks. The value, in clock ticks, of a second can be obtained with sysconf(_SC_CLK_TCK). We can know when the process started by reading the 22th word under /proc/PID/stat, its name is the 2nd word (in parenthis) and the uptime of the computer can be known by reading the first word of /proc/uptime.
The only directories under /proc containing numbers are those of PID. I can iterate over /proc to look for them and check for changes. I must use a buffer. Iterating without idle time consume too much CPU, sleep for 2s between each iteration solve it.
I need a daemon to run in background, a systemd service should work. To stop the service, systemd send SIGTERM so I need to handle it via a sigatomic_t, it is the only way to handle a signal.
I need to store the datas collected by the daemon in a file so it won't be lost between boots. /var/lib is the directory made for that. I create a function to write all the dats on this files when SIGTERM is received.
I also need to access the datas via CLI. Reading the file is easy but accessing the datas still used by the daemon is harder. Shared memory needs to be freed manually and need to be kept up to date even when not asked by the user. A socket can only transfer characters so I need to serialize (convert it to characters). I chose socket. A root process create the socket so I have to make it readable/writable/executable by everyone. Socket was shit to do ! Never do that unless it is the only way.
For the config file, I don't want all the user to set up the daemon so a single config file in /etc should be enough
For admin commands, I use signals as it is simpler and lighter than a socket for monodirectional signals. There are only 2 user defined signals so I can't use them too much
